<?php
$a = 5;
$b = '05';
var_dump($a == $b);
var_dump((int)'012345');
var_dump((float)123.0 === (int)123.0);
var_dump(0 == 'hello, world');

// docker run --rm -v ${pwd}/php-cli/:/cli php:8.2-cli php /cli/start.php
// docker run --rm -v ${pwd}/php-cli/:/cli php:7.4-cli php /cli/start.php

// 1

// PHP 8.2
// bool(true)
// int(12345)
// bool(false)
// bool(false)

// PHP 7.4
// bool(true)
// int(12345)
// bool(false)
// bool(true)

// Разъяснения:
// var_dump($a == $b);
// Результат: bool(true)
// Оператор == выполняет нестрогое сравнение, при котором PHP автоматически приводит строки к числовому типу.
// '05' преобразуется в целое число 5, поэтому сравнение $a == $b становится 5 == 5, что истинно.

// var_dump((int)'012345');
// Результат: int(12345)
// (int) приводит строку к целочисленному типу.
// При преобразовании строки '012345' к целому числу ведущий ноль игнорируется, так как он не указывает на восьмеричное значение.

// var_dump((float)123.0 === (int)123.0);
// Результат: bool(false)
// Оператор === выполняет строгое сравнение (сравниваются и значения, и типы).
// (float)123.0 имеет тип float, а (int)123.0 — тип int.
// Несмотря на то, что оба значения равны 123, их типы различаются, поэтому результат сравнения — false.

// var_dump(0 == 'hello, world');
// Результат: bool(false) в PHP 8+ (ранее было bool(true)).
// В PHP 8+ строка 'hello, world' не преобразуется в 0 для нестрогого сравнения. Поэтому 0 == 'hello, world' возвращает false.
// В PHP 8.0 изменено поведение сравнения чисел с нечисловыми строками. Раньше строка, которая не начиналась с числа, преобразовывалась в 0.
// Но теперь строка 'hello, world' не преобразуется в число. Вместо этого сравнение типа число == строка всегда возвращает false, если строка не является числовой.


// 2

// Используя только две числовые переменные, поменяйте их значение местами.
// Например, если a = 1, b = 2, надо, чтобы получилось: b = 1, a = 2. Дополнительные переменные, функции и конструкции типа list() использовать нельзя.

// Чтобы поменять значения двух числовых переменных местами без использования дополнительных переменных, можно использовать арифметические операции сложения и вычитания.

$a = 1;
$b = 2;

// Меняем значения
$a = $a + $b; // a = 1 + 2 = 3
$b = $a - $b; // b = 3 - 2 = 1
$a = $a - $b; // a = 3 - 1 = 2

// Выводим результат
echo "a = $a, b = $b". PHP_EOL; // a = 2, b = 1 . PHP_EOL - перенос на новую строку следующего результата

// Первое действие:
// a = $a + $b
// Теперь a содержит сумму первоначальных значений a и b.

// Второе действие:
// b = $a - $b
// Вычитаем старое значение b из нового значения a (суммы). Таким образом, b становится равным старому значению a.

// Третье действие:
// a = $a - $b
// Вычитаем новое значение b (старое значение a) из суммы. Теперь a становится равным старому значению b.


// Чтобы поменять значения двух числовых переменных местами без использования дополнительных переменных, можно использовать побитовый XOR.

$a = 1;
$b = 2;

// Меняем значения
$a = $a ^ $b; // a = 1 ^ 2
$b = $a ^ $b; // b = (1 ^ 2) ^ 2 = 1
$a = $a ^ $b; // a = (1 ^ 2) ^ 1 = 2

// Выводим результат
echo "a = $a, b = $b"; // a = 2, b = 1


// Вывод результата на новой строке:
// Для веб-среды: Используйте <br>.
// echo "a = $a, b = $b<br>"; // Перенос строки в HTML
// Для консоли или файлов: Используйте \n или PHP_EOL.
// echo "a = $a, b = $b\n"; // Перенос строки в консоли
// echo "a = $a, b = $b" . PHP_EOL; // Перенос строки с PHP_EOL